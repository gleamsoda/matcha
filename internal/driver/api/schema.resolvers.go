package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"matcha/internal/core"
	"matcha/internal/driver/api/gqlgen"
	"matcha/internal/driver/api/model"

	uuid "github.com/gofrs/uuid/v5"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUser) (*core.User, error) {
	return r.createUser.Execute(ctx, &core.CreateUserParams{
		Username: input.Username,
		Email:    input.Email,
		Password: input.Password,
	})
}

// CreateIssue is the resolver for the createIssue field.
func (r *mutationResolver) CreateIssue(ctx context.Context, input model.CreateIssue) (*core.Issue, error) {
	return r.createIssue.Execute(ctx, &core.CreateIssueParams{
		Title:       input.Title,
		Description: input.Description,
	})
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*core.User, error) {
	return r.getUser.Execute(ctx, id)
}

// Issues is the resolver for the issues field.
func (r *queryResolver) Issues(ctx context.Context) ([]*core.Issue, error) {
	return r.listIssues.Execute(ctx)
}

// Mutation returns gqlgen.MutationResolver implementation.
func (r *Resolver) Mutation() gqlgen.MutationResolver { return &mutationResolver{r} }

// Query returns gqlgen.QueryResolver implementation.
func (r *Resolver) Query() gqlgen.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
